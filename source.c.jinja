
// Copyright 2015  Malcolm Inglis <http://minglis.id.au>
//
// This file is part of Libbase.
//
// Libbase is free software: you can redistribute it and/or modify it under
// the terms of the GNU Affero General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// Libbase is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for
// more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Libbase. If not, see <https://gnu.org/licenses/>.


// This file is the result of rendering:
//
//     {{template_path}}
//
// You should make changes to this file by tuning the build process, or (at a
// stretch) modifying the generation script or template file; not by editing
// this file as-is.


{% for p in sys_headers %}
#include <{{p}}>
{% endfor %}

{% for path in rel_headers %}
#include "{{p}}"
{% else %}
#include "{{filename}}.h"
{% endfor %}



{{type}}
{{funcname}}__id(
        {{type}} const x )
{
    return x;
}


{% if char_funcs is defined %}

#include <ctype.h>

#include <libmacro/compare.h>


bool
{{funcname}}__equal_i(
        {{type}} const x,
        {{type}} const y )
{
    return tolower( ( uchar ) x ) == tolower( ( uchar ) y );
}


bool
{{funcname}}__not_equal_i(
        {{type}} const x,
        {{type}} const y )
{
    return !{{funcname}}__equal_i( x, y );
}


ord
{{funcname}}__compare_i(
        {{type}} const x,
        {{type}} const y )
{
    return COMPARE( tolower( ( uchar ) x ), tolower( ( uchar ) y ) );
}

{% endif %}



{% macro typeclass(name) %}
{% if typeclasses is defined and name in typeclasses %}
///////////////////////////////////
/// TYPECLASS: {{name}}
///////////////////////////////////

{{ caller() }}
{% endif %}
{% endmacro %}


{% call typeclass('BOUNDED') %}

#include <limits.h>


{{type}}
{{funcname}}__min_bound( void )
{
{% if min_bound is defined and min_bound %}
    return {{min_bound}};
{% elif num_type == 'unsigned' %}
    return 0;
{% else %}
    return {{macroname}}_MIN;
{% endif %}
}


{{type}}
{{funcname}}__max_bound( void )
{
{% if max_bound is defined and max_bound %}
    return {{max_bound}};
{% else %}
    return {{macroname}}_MAX;
{% endif %}
}

{% endcall %}


{% call typeclass('EQ') %}

bool
{{funcname}}__equal(
        {{type}} const x,
        {{type}} const y )
{
    return x == y;
}


bool
{{funcname}}__not_equal(
        {{type}} const x,
        {{type}} const y )
{
    return x != y;
}

{% endcall %}


{% call typeclass('ORD') %}

#include <libmacro/assert.h>
#include <libmacro/compare.h>


ord
{{funcname}}__compare(
        {{type}} const x,
        {{type}} const y )
{
    return COMPARE( x, y );
}


bool
{{funcname}}__less_than(
        {{type}} const x,
        {{type}} const y )
{
    return x < y;
}


bool
{{funcname}}__less_than_or_eq(
        {{type}} const x,
        {{type}} const y )
{
    return x <= y;
}


bool
{{funcname}}__greater_than_or_eq(
        {{type}} const x,
        {{type}} const y )
{
    return x >= y;
}


bool
{{funcname}}__greater_than(
        {{type}} const x,
        {{type}} const y )
{
    return x > y;
}


{{type}}
{{funcname}}__min2(
        {{type}} const x,
        {{type}} const y )
{
    return ( x < y ) ? x : y;
}


{{type}}
{{funcname}}__max2(
        {{type}} const x,
        {{type}} const y )
{
    return ( x > y ) ? x : y;
}


{{type}}
{{funcname}}__min_n(
        {{type}} const * const xs,
        size_t const n )
{
    ASSERT( xs != NULL, n != 0 );

    {{type}} min = xs[ 0 ];
    for ( size_t i = 0; i < n; i++ ) {
        if ( xs[ i ] < min ) {
            min = xs[ i ];
        }
    }
    return min;
}


{{type}}
{{funcname}}__max_n(
        {{type}} const * const xs,
        size_t const n )
{
    ASSERT( xs != NULL, n != 0 );

    {{type}} max = xs[ 0 ];
    for ( size_t i = 0; i < n; i++ ) {
        if ( xs[ i ] > max ) {
            max = xs[ i ];
        }
    }
    return max;
}


{{type}}
{{funcname}}__clamp(
        {{type}} const x,
        {{type}} const lower,
        {{type}} const upper )
{
    return ( lower >= x ) ? lower
         : ( upper <= x ) ? upper
                          : x;
}


bool
{{funcname}}__in_range(
        {{type}} const lower,
        {{type}} const upper,
        {{type}} const x )
{
    return lower <= x && x <= upper;
}


bool
{{funcname}}__in_xrange(
        {{type}} const lower,
        {{type}} const upper,
        {{type}} const x )
{
    return lower < x && x < upper;
}

{% endcall %}


{% call typeclass('ENUM') %}

{{type}}
{{funcname}}__succ(
        {{type}} const x )
{
{% if 'BOUNDED' in typeclasses %}
    ASSERT( x != {{funcname}}__max_bound() );
{% endif %}

    return x + 1;
}


{{type}}
{{funcname}}__pred(
        {{type}} const x )
{
{% if 'BOUNDED' in typeclasses %}
    ASSERT( x != {{funcname}}__min_bound() );
{% endif %}

    return x - 1;
}


{{type}}
{{funcname}}__succ_b(
        {{type}} const x )
{
{% if 'BOUNDED' in typeclasses %}
    if ( x == {{funcname}}__max_bound() ) {
        return x;
    } else {
        return x + 1;
    }
{% else %}
    return x + 1;
{% endif %}
}


{{type}}
{{funcname}}__pred_b(
        {{type}} const x )
{
{% if 'BOUNDED' in typeclasses %}
    if ( x == {{funcname}}__min_bound() ) {
        return x;
    } else {
        return x - 1;
    }
{% else %}
    return x - 1;
{% endif %}
}

{% endcall %}


{% call typeclass('NUM') %}

#include <errno.h>
#include <limits.h>     // INTMAX_MAX


bool
{{funcname}}__is_signed(
        void )
{
{% if num_type == 'signed' %}
    return true;
{% else %}
    return false;
{% endif %}
}


{{type}}
{{funcname}}__zero(
        void )
{
    return 0;
}


size_t
{{funcname}}__num_digits(
        {{type}} const x )
{
    size_t count = 0;
    {{type}} rem = x;
    do {
        rem /= 10;
        count++;
    } while ( rem != 0 );
    return count;
}


bool
{{funcname}}__can_add(
        {{type}} const x,
        {{type}} const y )
{
    return !{{funcname}}__add_would_underflow( x, y )
        && !{{funcname}}__add_would_overflow( x, y );
}


bool
{{funcname}}__can_sub(
        {{type}} const x,
        {{type}} const y )
{
    return !{{funcname}}__sub_would_underflow( x, y )
        && !{{funcname}}__sub_would_overflow( x, y );
}


bool
{{funcname}}__can_mul(
        {{type}} const x,
        {{type}} const y )
{
    return !{{funcname}}__mul_would_underflow( x, y )
        && !{{funcname}}__mul_would_overflow( x, y );
}


bool
{{funcname}}__can_div(
        {{type}} const x,
        {{type}} const y )
{
    return y != 0
        && !{{funcname}}__div_would_underflow( x, y )
        && !{{funcname}}__div_would_overflow( x, y );
}


{{type}}
{{funcname}}__add(
        {{type}} const x,
        {{type}} const y )
{
    if ( {{funcname}}__add_would_underflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__min_bound();
    } else if ( {{funcname}}__add_would_overflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__max_bound();
    } else {
        return x + y;
    }
}


{{type}}
{{funcname}}__sub(
        {{type}} const x,
        {{type}} const y )
{
    if ( {{funcname}}__sub_would_underflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__min_bound();
    } else if ( {{funcname}}__sub_would_overflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__max_bound();
    } else {
        return x - y;
    }
}


{{type}}
{{funcname}}__mul(
        {{type}} const x,
        {{type}} const y )
{
    if ( {{funcname}}__mul_would_underflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__min_bound();
    } else if ( {{funcname}}__mul_would_overflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__max_bound();
    } else {
        return x * y;
    }
}


{{type}}
{{funcname}}__mod(
        {{type}} const x,
        {{type}} const y )
{
    if ( {{funcname}}__can_div( x, y ) ) {
        return x % y;
    } else {
        errno = EOVERFLOW;
        return 0;
    }
}


{{type}}
{{funcname}}__add_b(
        {{type}} const x,
        {{type}} const y )
{
    int const saved_errno = errno;
    {{type}} const r = {{funcname}}__add( x, y );
    errno = saved_errno;
    return r;
}


{{type}}
{{funcname}}__sub_b(
        {{type}} const x,
        {{type}} const y )
{
    int const saved_errno = errno;
    {{type}} const r = {{funcname}}__sub( x, y );
    errno = saved_errno;
    return r;
}


{{type}}
{{funcname}}__mul_b(
        {{type}} const x,
        {{type}} const y )
{
    int const saved_errno = errno;
    {{type}} const r = {{funcname}}__mul( x, y );
    errno = saved_errno;
    return r;
}


{{type}}
{{funcname}}__div_b(
        {{type}} const x,
        {{type}} const y )
{
    int const saved_errno = errno;
    {{type}} const r = {{funcname}}__div( x, y );
    errno = saved_errno;
    return r;
}


{{type}}
{{funcname}}__mod_b(
        {{type}} const x,
        {{type}} const y )
{
    int const saved_errno = errno;
    {{type}} const r = {{funcname}}__mod( x, y );
    errno = saved_errno;
    return r;
}


{{type}}
{{funcname}}__negate_b( {{type}} const x )
{
    int const saved_errno = errno;
    {{type}} const r = {{funcname}}__negate( x );
    errno = saved_errno;
    return r;
}


{{type}}
{{funcname}}__abs_b( {{type}} const x )
{
    int const saved_errno = errno;
    {{type}} const r = {{funcname}}__abs( x );
    errno = saved_errno;
    return r;
}


bool
{{funcname}}__in_delta(
        {{type}} const x,
        {{type}} const delta,
        {{type}} const y )
{
    return {{funcname}}__sub_b( x, delta ) <= y
        && y <= {{funcname}}__add_b( x, delta );
}


bool
{{funcname}}__in_xdelta(
        {{type}} const x,
        {{type}} const delta,
        {{type}} const y )
{
    return {{funcname}}__sub_b( x, delta ) < y
        && y < {{funcname}}__add_b( x, delta );
}


bool
{{funcname}}__is_zero(
        {{type}} const x )
{
    return x == 0;
}


bool
{{funcname}}__is_nonzero(
        {{type}} const x )
{
    return x != 0;
}


bool
{{funcname}}__is_positive(
        {{type}} const x )
{
    return x > 0;
}


ord
{{funcname}}__compare_0(
        {{type}} const x )
{
    return {{funcname}}__compare( x, 0 );
}


bool
{{funcname}}__is_even(
        {{type}} const x )
{
    return x % 2 == 0;
}


bool
{{funcname}}__is_odd(
        {{type}} const x )
{
    return x % 2 == 1;
}


{{type}} {{funcname}}__add_2( {{type}} const x )
        { return {{funcname}}__add( x, 2 ); }
{{type}} {{funcname}}__sub_2( {{type}} const x )
        { return {{funcname}}__sub( x, 2 ); }
{{type}} {{funcname}}__mul_2( {{type}} const x )
        { return {{funcname}}__mul( x, 2 ); }
{{type}} {{funcname}}__div_2( {{type}} const x )
        { return {{funcname}}__div( x, 2 ); }
{{type}} {{funcname}}__mod_2( {{type}} const x )
        { return {{funcname}}__mod( x, 2 ); }


{{type}} {{funcname}}__mul_10( {{type}} const x )
        { return {{funcname}}__mul( x, 10 ); }
{{type}} {{funcname}}__div_10( {{type}} const x )
        { return {{funcname}}__div( x, 10 ); }


{{type}} {{funcname}}__add_b_2( {{type}} const x )
        { return {{funcname}}__add_b( x, 2 ); }
{{type}} {{funcname}}__sub_b_2( {{type}} const x )
        { return {{funcname}}__sub_b( x, 2 ); }
{{type}} {{funcname}}__mul_b_2( {{type}} const x )
        { return {{funcname}}__mul_b( x, 2 ); }
{{type}} {{funcname}}__div_b_2( {{type}} const x )
        { return {{funcname}}__div_b( x, 2 ); }
{{type}} {{funcname}}__mod_b_2( {{type}} const x )
        { return {{funcname}}__mod_b( x, 2 ); }
{{type}} {{funcname}}__mul_b_10( {{type}} const x )
        { return {{funcname}}__mul_b( x, 10 ); }
{{type}} {{funcname}}__div_b_10( {{type}} const x )
        { return {{funcname}}__div_b( x, 10 ); }
{{type}} {{funcname}}__mod_b_10( {{type}} const x )
        { return {{funcname}}__mod_b( x, 10 ); }


{% if num_type == 'signed' %}


bool
{{funcname}}__add_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return y < 0 && x < ( {{funcname}}__min_bound() - y );
}


bool
{{funcname}}__add_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return y > 0 && x > ( {{funcname}}__max_bound() - y );
}


bool
{{funcname}}__sub_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return y > 0 && x < ( {{funcname}}__min_bound() + y );
}


bool
{{funcname}}__sub_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return y < 0 && x > ( {{funcname}}__max_bound() + y );
}


bool
{{funcname}}__mul_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return ( x > 0 && y < 0 ) ? ( y < ( {{funcname}}__min_bound() / x ) )
         : ( x < 0 && y > 0 ) ? ( x < ( {{funcname}}__min_bound() / y ) )
                              : false;
}


bool
{{funcname}}__mul_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return ( x > 0 && y > 0 ) ? ( x > ( {{funcname}}__max_bound() / y ) )
         : ( x < 0 && y < 0 ) ? ( y < ( {{funcname}}__max_bound() / x ) )
                              : false;
}


bool
{{funcname}}__div_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__div_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return x == {{funcname}}__min_bound() && y == -1;
}


{{type}}
{{funcname}}__div(
        {{type}} const x,
        {{type}} const y )
{
    if ( y == 0 ) {
        errno = EDOM;
        // We return the maximum value as `y` approaches `0` from positive:
        return ( x < 0 ) ? {{funcname}}__min_bound()
             : ( x > 0 ) ? {{funcname}}__max_bound()
                         : 0;
    } else if ( {{funcname}}__div_would_overflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__max_bound();
    } else {
        return x / y;
    }
}


{{type}}
{{funcname}}__negate(
        {{type}} const x )
{
    if ( x != {{funcname}}__min_bound() ) {
        return -x;
    } else {
        errno = EOVERFLOW;
        return 0;
    }
}


{{type}}
{{funcname}}__abs(
        {{type}} const x )
{
    return ( x < 0 ) ? {{funcname}}__negate( x ) : x;
}


{{type}}
{{funcname}}__update_average(
        {{type}} const average,
        intmax_t const num,
        {{type}} const value )
{
    if ( num <= 0 ) {
        return value;
    } else if ( num == INTMAX_MAX ) {
        errno = EOVERFLOW;
        return average;
    }
    int const saved_errno = errno;
    errno = 0;
    // `num + 1 > 0`, so dividing a `{{type}}` value by that quantity will
    // not produce a value that overflows for `{{type}}`:
    {{type}} const new = {{funcname}}__add(
                           average,
                           {{funcname}}__sub( value, average ) / ( num + 1 ) );
    if ( errno ) {
        return average;
    } else {
        errno = saved_errno;
        return new;
    }
}


bool
{{funcname}}__same_sign(
        {{type}} const x,
        {{type}} const y )
{
    return ( x < 0 ) == ( y < 0 );
}


bool
{{funcname}}__is_negative(
        {{type}} const x )
{
    return x < 0;
}


bool
{{funcname}}__is_nonpositive(
        {{type}} const x )
{
    return x <= 0;
}


bool
{{funcname}}__is_nonnegative(
        {{type}} const x )
{
    return x >= 0;
}


{% else %} {# unsigned type #}

#include <libmacro/minmax.h>    // MIN


bool
{{funcname}}__add_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__add_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return x > ( {{funcname}}__max_bound() - y );
}


bool
{{funcname}}__sub_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return x < y;
}


bool
{{funcname}}__sub_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__mul_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__mul_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return ( y > 0 ) && ( x > ( {{funcname}}__max_bound() / y ) );
}


bool
{{funcname}}__div_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__div_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


{{type}}
{{funcname}}__div(
        {{type}} const x,
        {{type}} const y )
{
    if ( y == 0 ) {
        errno = EDOM;
        return ( x == 0 ) ? 0 : {{funcname}}__max_bound();
    } else {
        return x / y;
    }
}


{{type}}
{{funcname}}__negate( {{type}} const x )
{
    return -x;
}


{{type}}
{{funcname}}__abs( {{type}} const x )
{
    return x;
}


{{type}}
{{funcname}}__update_average(
        {{type}} const average,
        intmax_t const num,
        {{type}} const value )
{
    if ( num <= 0 ) {
        return value;
    } else if ( num == INTMAX_MAX ||
                ( num > {{funcname}}__max_bound() && average > 0 ) ) {
        errno = EOVERFLOW;
        return average;
    }
    int const saved_errno = errno;
    errno = 0;
    {{type}} const new = {{funcname}}__add( {{funcname}}__mul( num, average ),
                                            value )
                         / ( num + 1 );
    if ( errno ) {
        return average;
    } else {
        errno = saved_errno;
        return new;
    }
}


bool
{{funcname}}__same_sign(
        {{type}} const x,
        {{type}} const y )
{
    return true;
}


bool
{{funcname}}__is_negative(
        {{type}} const x )
{
    return false;
}


bool
{{funcname}}__is_nonpositive(
        {{type}} const x )
{
    return x == 0;
}


bool
{{funcname}}__is_nonnegative(
        {{type}} const x )
{
    return true;
}

{% endif %}

{% endcall %}


{% call typeclass('FROM_STR') %}

#include <errno.h>

{% if type == 'bool' %}

#include <ctype.h>
#include <string.h>


static
bool
prefixi( char const * const xs,
         char const * const ys )
{
    for ( size_t i = 0; xs[ i ] != '\0'; i++ ) {
        if ( tolower( ( uchar ) xs[ i ] ) != tolower( ( uchar ) ys[ i ] ) ) {
            return false;
        }
    }
    return true;
}


{{type}}
{{funcname}}__from_str(
        char const * const str )
{
    if ( str == NULL || str[ 0 ] == '\0' ) {
        errno = EINVAL;
        return false;
    }
    char const * p = str;
    while ( isspace( *p ) ) {
        p++;
    }
    {{type}} r;
    if ( prefixi( p, "true" ) ) {
        r = true;
        p += strlen( "true" );
    } else if ( prefixi( p, "false" ) ) {
        r = false;
        p += strlen( "false" );
    } else {
        errno = EBADMSG;
        return false;
    }
    while ( isspace( *p ) ) {
        p++;
    }
    if ( *p != '\0' ) {
        errno = EBADMSG;
        return false;
    }
    return r;
}

{% else %}

#include <ctype.h>
#include <inttypes.h>

{{type}}
{{funcname}}__from_str(
        char const * const str )
{
    if ( str == NULL || str[ 0 ] == '\0' ) {
        errno = EINVAL;
        return 0;
    }
    int const saved_errno = errno;
    errno = 0;
    char * end_ptr;
{% if num_type == 'signed' %}
    intmax_t const x = strtoimax( str, &end_ptr, 10 );
{% else %}
    uintmax_t const x = strtoumax( str, &end_ptr, 10 );
{% endif %}
    if ( errno ) {
        return 0;
    }
    while ( isspace( *end_ptr ) ) {
        end_ptr++;
    }
    if ( *end_ptr != '\0' ) {
        errno = EBADMSG;
        return 0;
    } else if ( x < {{funcname}}__min_bound() ) {
        errno = ERANGE;
        return {{funcname}}__min_bound();
    } else if ( x > {{funcname}}__max_bound() ) {
        errno = ERANGE;
        return {{funcname}}__max_bound();
    } else {
        errno = saved_errno;
        return x;
    }
}

{% endif %}


void
{{funcname}}__arg_parse(
        char const * const name,
        char const * const value,
        void * const vdestination )
{
    ASSERT( value != NULL, vdestination != NULL );

    {{type}} * const dest = vdestination;
    *dest = {{funcname}}__from_str( value );
}


{% endcall %}


{% call typeclass('TO_STR') %}

{% if type == 'bool' %}

char const *
{{funcname}}__to_str(
        {{type}} const x )
{
    return x ? "true" : "false";
}

{% else %}

{{no_implementation}}

{% endif %}

{% endcall %}


{% call typeclass('TO_STRM') %}

#include <errno.h>
#include <limits.h>
#include <stdlib.h>
#include <string.h>

#include <libmacro/assert.h>
#include <libmacro/logic.h>


static
void
reverse( char * const xs )
{
    ASSERT( xs != NULL );

    size_t const len = strlen( xs );
    if ( len == 1 ) {
        return;
    }
    for ( size_t i = 0; i < ( len / 2 ); i++ ) {
        xs[ i ] = xs[ len - 1 - i ];
    }
}


{% if num_type == 'signed' %}
{# signed number #}


char *
{{funcname}}__to_strm(
        {{type}} const x )
{
    size_t const nd = {{funcname}}__num_digits( x );
    ASSERT( nd < SIZE_MAX - 2 );
    size_t const size = nd + 1 + ( x < 0 );
    int const saved_errno = errno;
    errno = 0;
    char * const buf = malloc( size );
    if ( errno ) { return NULL; }
    {{funcname}}__into_strm( x, buf, size );
    errno = saved_errno;
    return buf;
}


static
void
into_strm(
        {{type}} const x,
        char * const buf,
        size_t const size )
{
    ASSERT( buf != NULL, size > 0 );

    bool const neg = x < 0;
    if ( neg ) {
        buf[ 0 ] = '-';
    }
    size_t i = neg;
    {{type}} r = x;
    do {
        if ( i >= size - 1 ) {
            break;
        }
        buf[ i ] = '0' + ( r % 10 );
        r /= 10;
        i++;
    } while ( r != 0 );
    buf[ i ] = '\0';
    reverse( buf + neg );
}


{% else %}
{# unsigned number #}

char *
{{funcname}}__to_strm(
        {{type}} const x )
{
    size_t const nd = {{funcname}}__num_digits( x );
    ASSERT( nd < SIZE_MAX - 1 );
    size_t const size = nd + 1;
    int const saved_errno = errno;
    errno = 0;
    char * const buf = malloc( size );
    if ( errno ) { return NULL; }
    {{funcname}}__into_strm( x, buf, size );
    errno = saved_errno;
    return buf;
}


static
void
into_strm(
        {{type}} const x,
        char * const buf,
        size_t const size )
{
    ASSERT( size > 0 );
    size_t i = 0;
    {{type}} r = x;
    do {
        if ( i >= size - 1 ) {
            break;
        }
        buf[ i ] = '0' + ( r % 10 );
        r /= 10;
        i++;
    } while ( r != 0 );
    buf[ i ] = '\0';
    reverse( buf );
}

{% endif %}


void
{{funcname}}__into_strm(
        {{type}} const x,
        char * const buf,
        size_t const size )
{
    ASSERT( IMPLIES( buf == NULL, size == 0 ) );

    if ( size > 0 ) {
        // We use a temporary buffer so that reversing in `into_strm` works:
        char tmp[ 32 ];
        into_strm( x, tmp, sizeof tmp );
        strncpy( buf, tmp, size - 1 );
        buf[ size - 1 ] = '\0';
    }
}


{% endcall %}

