
// Copyright 2015  Malcolm Inglis <http://minglis.id.au>
//
// This file is part of Libbase.
//
// Libbase is free software: you can redistribute it and/or modify it under
// the terms of the GNU Affero General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// Libbase is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for
// more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Libbase. If not, see <https://gnu.org/licenses/>.


// This file is the result of rendering:
//
//     {{template_path}}
//
// You should make changes to this file by tuning the build process, or (at a
// stretch) modifying the generation script or template file; not by editing
// this file as-is.


{% for p in sys_headers %}
#include <{{p}}>
{% endfor %}

{% for path in rel_headers %}
#include "{{p}}"
{% else %}
#include "{{filename}}.h"
{% endfor %}



{{type}}
{{funcname}}__id(
        {{type}} const x )
{
    return x;
}




{% if 'NULL' in typeclasses %}


{{type}}
{{funcname}}__null(
        void )
{
    return 0;
}


bool
{{funcname}}__is_null(
        {{type}} const x )
{
    return x == {{funcname}}__null();
}


{% endif %} {# NULL #}




{% if 'BOUNDED' in typeclasses %}

#include <errno.h>

#include <libmacro/bound.h>


{{type}}
{{funcname}}__min_bound( void )
{
{% if min_bound is defined and min_bound %}
    return {{min_bound}};
{% else %}
    return MIN_BOUND( ( {{type}} ) 0 );
{% endif %}
}


{{type}}
{{funcname}}__max_bound( void )
{
{% if max_bound is defined and max_bound %}
    return {{max_bound}};
{% else %}
    return MAX_BOUND( ( {{type}} ) 0 );
{% endif %}
}


{{type}}
{{funcname}}__from_float(
        float const x )
{
    return {{funcname}}__from_ldouble( x );
}


{{type}}
{{funcname}}__from_double(
        double const x )
{
    return {{funcname}}__from_ldouble( x );
}


{{type}}
{{funcname}}__from_ldouble(
        ldouble const x )
{
    if ( x < {{funcname}}__min_bound() ) {
        errno = ERANGE;
        return {{funcname}}__min_bound();
    } else if ( x > {{funcname}}__max_bound() ) {
        errno = ERANGE;
        return {{funcname}}__max_bound();
    } else {
        errno = 0;
        if ( x >= 0 ) {
            return ( {{type}} ) ( x + 0.5 );
        } else {
            return ( {{type}} ) ( x - 0.5 );
        }
    }
}


{% endif %}




{% if 'EQ' in typeclasses %}


bool
{{funcname}}__equal(
        {{type}} const x,
        {{type}} const y )
{
    return x == y;
}


bool
{{funcname}}__not_equal(
        {{type}} const x,
        {{type}} const y )
{
    return x != y;
}


{% endif %} {# EQ #}




{% if 'ORD' in typeclasses %}


#include <libmacro/assert.h>
#include <libmacro/compare.h>


ord
{{funcname}}__compare(
        {{type}} const x,
        {{type}} const y )
{
    return COMPARE( x, y );
}


bool
{{funcname}}__less_than(
        {{type}} const x,
        {{type}} const y )
{
    return x < y;
}


bool
{{funcname}}__less_than_or_eq(
        {{type}} const x,
        {{type}} const y )
{
    return x <= y;
}


bool
{{funcname}}__greater_than_or_eq(
        {{type}} const x,
        {{type}} const y )
{
    return x >= y;
}


bool
{{funcname}}__greater_than(
        {{type}} const x,
        {{type}} const y )
{
    return x > y;
}


{{type}}
{{funcname}}__min2(
        {{type}} const x,
        {{type}} const y )
{
    return ( x < y ) ? x : y;
}


{{type}}
{{funcname}}__max2(
        {{type}} const x,
        {{type}} const y )
{
    return ( x > y ) ? x : y;
}


{{type}}
{{funcname}}__min_n(
        {{type}} const * const xs,
        size_t const n )
{
    ASSERT( xs != NULL, n != 0 );

    {{type}} min = xs[ 0 ];
    for ( size_t i = 0; i < n; i++ ) {
        if ( xs[ i ] < min ) {
            min = xs[ i ];
        }
    }
    return min;
}


{{type}}
{{funcname}}__max_n(
        {{type}} const * const xs,
        size_t const n )
{
    ASSERT( xs != NULL, n != 0 );

    {{type}} max = xs[ 0 ];
    for ( size_t i = 0; i < n; i++ ) {
        if ( xs[ i ] > max ) {
            max = xs[ i ];
        }
    }
    return max;
}


{{type}}
{{funcname}}__clamp(
        {{type}} const x,
        {{type}} const lower,
        {{type}} const upper )
{
    return ( lower >= x ) ? lower
         : ( upper <= x ) ? upper
                          : x;
}


bool
{{funcname}}__in_range(
        {{type}} const lower,
        {{type}} const upper,
        {{type}} const x )
{
    return lower <= x && x <= upper;
}


bool
{{funcname}}__in_xrange(
        {{type}} const lower,
        {{type}} const upper,
        {{type}} const x )
{
    return lower < x && x < upper;
}


{% endif %}




{% if 'ENUM' in typeclasses %}


{{type}}
{{funcname}}__succ(
        {{type}} const x )
{
{% if 'BOUNDED' in typeclasses %}
    ASSERT( x != {{funcname}}__max_bound() );
{% endif %}

    return x + 1;
}


{{type}}
{{funcname}}__pred(
        {{type}} const x )
{
{% if 'BOUNDED' in typeclasses %}
    ASSERT( x != {{funcname}}__min_bound() );
{% endif %}

    return x - 1;
}


{{type}}
{{funcname}}__succ_b(
        {{type}} const x )
{
{% if 'BOUNDED' in typeclasses %}
    if ( x == {{funcname}}__max_bound() ) {
        return x;
    } else {
        return x + 1;
    }
{% else %}
    return x + 1;
{% endif %}
}


{{type}}
{{funcname}}__pred_b(
        {{type}} const x )
{
{% if 'BOUNDED' in typeclasses %}
    if ( x == {{funcname}}__min_bound() ) {
        return x;
    } else {
        return x - 1;
    }
{% else %}
    return x - 1;
{% endif %}
}


{% endif %} {# ENUM #}




{% if 'CHAR' in typeclasses %}


#include <libmacro/compare.h>


{{type}}
{{funcname}}__from_char(
        char const c )
{
    return c;
}


{{type}}
{{funcname}}__to_lower(
        {{type}} const x )
{
    switch ( x ) {
    case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G':
    case 'H': case 'I': case 'J': case 'K': case 'L': case 'M': case 'N':
    case 'O': case 'P': case 'Q': case 'R': case 'S': case 'T': case 'U':
    case 'V': case 'W': case 'X': case 'Y': case 'Z':
        return x + 32;
    default:
        return x;
    }
}


{{type}}
{{funcname}}__to_upper(
        {{type}} const x )
{
    switch ( x ) {
    case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g':
    case 'h': case 'i': case 'j': case 'k': case 'l': case 'm': case 'n':
    case 'o': case 'p': case 'q': case 'r': case 's': case 't': case 'u':
    case 'v': case 'w': case 'x': case 'y': case 'z':
        return x - 32;
    default:
        return x;
    }
}


bool
{{funcname}}__equal_i(
        {{type}} const x,
        {{type}} const y )
{
    return {{funcname}}__to_lower( x ) == {{funcname}}__to_lower( y );
}


bool
{{funcname}}__not_equal_i(
        {{type}} const x,
        {{type}} const y )
{
    return !{{funcname}}__equal_i( x, y );
}


ord
{{funcname}}__compare_i(
        {{type}} const x,
        {{type}} const y )
{
    return COMPARE( {{funcname}}__to_lower( x ),
                    {{funcname}}__to_lower( y ) );
}


{% if 'EQ' in typeclasses %}


bool
{{funcname}}__equal_char(
        {{type}} const x,
        char const c )
{
    return {{funcname}}__equal( x, {{funcname}}__from_char( c ) );
}


{% endif %} {# EQ #}
{% endif %} {# CHAR #}




{% if 'NUM' in typeclasses %}


#include <errno.h>
#include <limits.h>     // SIZE_MAX


{{type}}
{{funcname}}__zero(
        void )
{
    return 0;
}


bool
{{funcname}}__is_signed(
        void )
{
{% if 'FLOAT' in typeclasses %}
    return true;
{% elif num_type == 'unsigned' %}
    return false;
{% else %}
    return true;
{% endif %}
}


{{type}}
{{funcname}}__abs(
        {{type}} const x )
{
    return {{funcname}}__is_negative( x ) ? {{funcname}}__negate( x ) : x;
}


bool
{{funcname}}__can_add(
        {{type}} const x,
        {{type}} const y )
{
    return !{{funcname}}__add_would_underflow( x, y )
        && !{{funcname}}__add_would_overflow( x, y );
}


bool
{{funcname}}__can_sub(
        {{type}} const x,
        {{type}} const y )
{
    return !{{funcname}}__sub_would_underflow( x, y )
        && !{{funcname}}__sub_would_overflow( x, y );
}


bool
{{funcname}}__can_mul(
        {{type}} const x,
        {{type}} const y )
{
    return !{{funcname}}__mul_would_underflow( x, y )
        && !{{funcname}}__mul_would_overflow( x, y );
}


bool
{{funcname}}__can_div(
        {{type}} const x,
        {{type}} const y )
{
    return y != 0
        && !{{funcname}}__div_would_underflow( x, y )
        && !{{funcname}}__div_would_overflow( x, y );
}


{{type}}
{{funcname}}__add_b(
        {{type}} const x,
        {{type}} const y )
{
    {{type}} const r = {{funcname}}__add( x, y );
    errno = 0;
    return r;
}


{{type}}
{{funcname}}__sub_b(
        {{type}} const x,
        {{type}} const y )
{
    {{type}} const r = {{funcname}}__sub( x, y );
    errno = 0;
    return r;
}


{{type}}
{{funcname}}__mul_b(
        {{type}} const x,
        {{type}} const y )
{
    {{type}} const r = {{funcname}}__mul( x, y );
    errno = 0;
    return r;
}


{{type}}
{{funcname}}__div_b(
        {{type}} const x,
        {{type}} const y )
{
    {{type}} const r = {{funcname}}__div( x, y );
    errno = 0;
    return r;
}


{{type}}
{{funcname}}__mod_b(
        {{type}} const x,
        {{type}} const y )
{
    {{type}} const r = {{funcname}}__mod( x, y );
    errno = 0;
    return r;
}


{{type}}
{{funcname}}__negate_b(
        {{type}} const x )
{
    {{type}} const r = {{funcname}}__negate( x );
    errno = 0;
    return r;
}


{{type}}
{{funcname}}__abs_b(
        {{type}} const x )
{
    {{type}} const r = {{funcname}}__abs( x );
    errno = 0;
    return r;
}


bool
{{funcname}}__same_sign(
        {{type}} const x,
        {{type}} const y )
{
    return {{funcname}}__is_negative( x ) == {{funcname}}__is_negative( y );
}


bool
{{funcname}}__in_delta(
        {{type}} const x,
        {{type}} const delta,
        {{type}} const y )
{
    {{type}} const lower = {{funcname}}__sub_b( x, delta );
    {{type}} const upper = {{funcname}}__add_b( x, delta );
    return {{funcname}}__in_range( lower, upper, y );
}


bool
{{funcname}}__in_xdelta(
        {{type}} const x,
        {{type}} const delta,
        {{type}} const y )
{
    {{type}} const lower = {{funcname}}__sub_b( x, delta );
    {{type}} const upper = {{funcname}}__add_b( x, delta );
    return {{funcname}}__in_xrange( lower, upper, y );
}


bool {{funcname}}__is_negative   ( {{type}} const x ) { return x < 0; }
bool {{funcname}}__is_nonpositive( {{type}} const x ) { return x <= 0; }
bool {{funcname}}__is_zero       ( {{type}} const x ) { return x == 0; }
bool {{funcname}}__is_nonzero    ( {{type}} const x ) { return x != 0; }
bool {{funcname}}__is_nonnegative( {{type}} const x ) { return x >= 0; }
bool {{funcname}}__is_positive   ( {{type}} const x ) { return x > 0; }


ord {{funcname}}__compare_0( {{type}} const x )
        { return {{funcname}}__compare( x, 0 ); }


{{type}} {{funcname}}__add_2( {{type}} const x )
        { return {{funcname}}__add( x, 2 ); }
{{type}} {{funcname}}__sub_2( {{type}} const x )
        { return {{funcname}}__sub( x, 2 ); }
{{type}} {{funcname}}__mul_2( {{type}} const x )
        { return {{funcname}}__mul( x, 2 ); }
{{type}} {{funcname}}__div_2( {{type}} const x )
        { return {{funcname}}__div( x, 2 ); }
{{type}} {{funcname}}__mod_2( {{type}} const x )
        { return {{funcname}}__mod( x, 2 ); }


{{type}} {{funcname}}__mul_10( {{type}} const x )
        { return {{funcname}}__mul( x, 10 ); }
{{type}} {{funcname}}__div_10( {{type}} const x )
        { return {{funcname}}__div( x, 10 ); }


{{type}} {{funcname}}__add_b_2( {{type}} const x )
        { return {{funcname}}__add_b( x, 2 ); }
{{type}} {{funcname}}__sub_b_2( {{type}} const x )
        { return {{funcname}}__sub_b( x, 2 ); }
{{type}} {{funcname}}__mul_b_2( {{type}} const x )
        { return {{funcname}}__mul_b( x, 2 ); }
{{type}} {{funcname}}__div_b_2( {{type}} const x )
        { return {{funcname}}__div_b( x, 2 ); }
{{type}} {{funcname}}__mod_b_2( {{type}} const x )
        { return {{funcname}}__mod_b( x, 2 ); }
{{type}} {{funcname}}__mul_b_10( {{type}} const x )
        { return {{funcname}}__mul_b( x, 10 ); }
{{type}} {{funcname}}__div_b_10( {{type}} const x )
        { return {{funcname}}__div_b( x, 10 ); }
{{type}} {{funcname}}__mod_b_10( {{type}} const x )
        { return {{funcname}}__mod_b( x, 10 ); }


{% if 'FLOAT' in typeclasses %}


{{type}}
{{funcname}}__add(
        {{type}} const x,
        {{type}} const y )
{
    errno = 0;
    if ( {{funcname}}__add_would_underflow( x, y )
      || {{funcname}}__add_would_overflow( x, y ) ) {
        errno = EOVERFLOW;
        return 0;
    } else {
        return x + y;
    }
}


{{type}}
{{funcname}}__sub(
        {{type}} const x,
        {{type}} const y )
{
    errno = 0;
    if ( {{funcname}}__sub_would_underflow( x, y )
      || {{funcname}}__sub_would_overflow( x, y ) ) {
        errno = EOVERFLOW;
        return 0;
    } else {
        return x - y;
    }
}


{{type}}
{{funcname}}__mul(
        {{type}} const x,
        {{type}} const y )
{
    errno = 0;
    if ( {{funcname}}__mul_would_underflow( x, y )
      || {{funcname}}__mul_would_overflow( x, y ) ) {
        errno = EOVERFLOW;
        return 0;
    } else {
        return x * y;
    }
}


{{type}}
{{funcname}}__div(
        {{type}} const x,
        {{type}} const y )
{
    errno = 0;
    if ( y == 0 ) {
        errno = EDOM;
        return 0;
    } else {
        return x / y;
    }
}


{{type}}
{{funcname}}__mod(
        {{type}} const x,
        {{type}} const y )
{
    errno = 0;
    if ( y == 0 ) {
        errno = EDOM;
        return 0;
    } else {
        intmax_t const n = x / y;
        return x - ( n * y );
    }
}


bool
{{funcname}}__add_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__add_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__sub_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__sub_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__mul_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__mul_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__div_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__div_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


{{type}}
{{funcname}}__negate( {{type}} const x )
{
    return -x;
}



{% else %} {# 'FLOAT' not in typeclasses #}


{{type}}
{{funcname}}__add(
        {{type}} const x,
        {{type}} const y )
{
    errno = 0;
    if ( {{funcname}}__add_would_underflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__min_bound();
    } else if ( {{funcname}}__add_would_overflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__max_bound();
    } else {
        return x + y;
    }
}


{{type}}
{{funcname}}__sub(
        {{type}} const x,
        {{type}} const y )
{
    errno = 0;
    if ( {{funcname}}__sub_would_underflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__min_bound();
    } else if ( {{funcname}}__sub_would_overflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__max_bound();
    } else {
        return x - y;
    }
}


{{type}}
{{funcname}}__mul(
        {{type}} const x,
        {{type}} const y )
{
    errno = 0;
    if ( {{funcname}}__mul_would_underflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__min_bound();
    } else if ( {{funcname}}__mul_would_overflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__max_bound();
    } else {
        return x * y;
    }
}


{{type}}
{{funcname}}__div(
        {{type}} const x,
        {{type}} const y )
{
    errno = 0;
    if ( y == 0 ) {
        errno = EDOM;
        // We return the maximum value as `y` approaches `0` from positive:
        return ( x < 0 ) ? {{funcname}}__min_bound()
             : ( x > 0 ) ? {{funcname}}__max_bound()
                         : 0;
    } else if ( {{funcname}}__div_would_underflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__min_bound();
    } else if ( {{funcname}}__div_would_overflow( x, y ) ) {
        errno = EOVERFLOW;
        return {{funcname}}__max_bound();
    } else {
        return x / y;
    }
}


{{type}}
{{funcname}}__mod(
        {{type}} const x,
        {{type}} const y )
{
    errno = 0;
    if ( {{funcname}}__can_div( x, y ) ) {
        return x % y;
    } else {
        errno = EOVERFLOW;
        return 0;
    }
}


{% if num_type == 'unsigned' %}


bool
{{funcname}}__add_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__add_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return x > ( {{funcname}}__max_bound() - y );
}


bool
{{funcname}}__sub_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return x < y;
}


bool
{{funcname}}__sub_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__mul_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__mul_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return ( y > 0 ) && ( x > ( {{funcname}}__max_bound() / y ) );
}


bool
{{funcname}}__div_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__div_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


{{type}}
{{funcname}}__negate( {{type}} const x )
{
    return -x;
}


{% else %} {# num_type != 'unsigned' #}


bool
{{funcname}}__add_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return y < 0 && x < ( {{funcname}}__min_bound() - y );
}


bool
{{funcname}}__add_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return y > 0 && x > ( {{funcname}}__max_bound() - y );
}


bool
{{funcname}}__sub_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return y > 0 && x < ( {{funcname}}__min_bound() + y );
}


bool
{{funcname}}__sub_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return y < 0 && x > ( {{funcname}}__max_bound() + y );
}


bool
{{funcname}}__mul_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return ( x > 0 && y < 0 ) ? ( y < ( {{funcname}}__min_bound() / x ) )
         : ( x < 0 && y > 0 ) ? ( x < ( {{funcname}}__min_bound() / y ) )
                              : false;
}


bool
{{funcname}}__mul_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return ( x > 0 && y > 0 ) ? ( x > ( {{funcname}}__max_bound() / y ) )
         : ( x < 0 && y < 0 ) ? ( y < ( {{funcname}}__max_bound() / x ) )
                              : false;
}


bool
{{funcname}}__div_would_underflow(
        {{type}} const x,
        {{type}} const y )
{
    return false;
}


bool
{{funcname}}__div_would_overflow(
        {{type}} const x,
        {{type}} const y )
{
    return x == {{funcname}}__min_bound() && y == -1;
}


{{type}}
{{funcname}}__negate(
        {{type}} const x )
{
    errno = 0;
    if ( x != {{funcname}}__min_bound() ) {
        return -x;
    } else {
        errno = EOVERFLOW;
        return 0;
    }
}


{% endif %} {# num_type != 'unsigned' #}
{% endif %} {# 'FLOAT' not in typeclasses #}
{% endif %} {# 'NUM' in typeclasses #}




{% if 'INTEGER' in typeclasses %}


bool
{{funcname}}__is_even(
        {{type}} const x )
{
    return x % 2 == 0;
}


bool
{{funcname}}__is_odd (
        {{type}} const x )
{
    return x % 2 == 1;
}


size_t
{{funcname}}__num_digits(
        {{type}} const x )
{
    size_t count = 0;
    {{type}} rem = x;
    do {
        rem /= 10;
        count++;
    } while ( rem != 0 );
    return count;
}


{% endif %} {# 'INTEGER' in typeclasses #}




{% if 'FLOAT' in typeclasses %}


#include <errno.h>
#include <limits.h>


intmax_t
{{funcname}}__to_intmax(
        {{type}} const x )
{
    errno = 0;
    if ( x < ( INTMAX_MIN - 0.5 ) ) {
        errno = EOVERFLOW;
        return INTMAX_MIN;
    } else if ( x > ( INTMAX_MAX + 0.5 ) ) {
        errno = EOVERFLOW;
        return INTMAX_MAX;
    } else {
        if ( x >= 0 ) {
            return x + 0.5;
        } else {
            return x - 0.5;
        }
    }
}


uintmax_t
{{funcname}}__to_uintmax(
        {{type}} const x )
{
    errno = 0;
    if ( x < -0.5 ) {
        errno = EOVERFLOW;
        return 0;
    } else if ( x > ( UINTMAX_MAX + 0.5 ) ) {
        errno = EOVERFLOW;
        return UINTMAX_MAX;
    } else {
        return x + 0.5;
    }
}


bool
{{funcname}}__equal_e(
        {{type}} const x,
        {{type}} const y,
        {{type}} const epsilon )
{
    return ( x - y ) < epsilon;
}


{{type}}
{{funcname}}__sum_n(
        {{type}} const * const xs,
        size_t const n )
{
    ASSERT( xs != NULL, n > 0 );

    {{type}} sum = xs[ 0 ];
    for ( size_t i = 1; i < n; i++ ) {
        sum += xs[ i ];
    }
    return sum;
}


{{type}}
{{funcname}}__average_n(
        {{type}} const * const xs,
        size_t const n )
{
    ASSERT( xs != NULL, n > 0 );

    return {{funcname}}__sum_n( xs, n ) / n;
}


{{type}}
{{funcname}}__update_average(
        {{type}} const avg,
        size_t const n,
        {{type}} const add )
{
    errno = 0;
    if ( n == SIZE_MAX ) {
        errno = EOVERFLOW;
        return avg;
    } else {
        return ( ( avg * n ) + add ) / ( n + 1 );
    }
}


{% endif %} {# 'FLOAT' in typeclasses #}




{% if 'FROM_STR' in typeclasses %}


#include <ctype.h>
#include <errno.h>


{% if 'FLOAT' in typeclasses %}


#include <stdlib.h>


{{type}}
{{funcname}}__from_str(
        char const * const str )
{
    if ( str == NULL || str[ 0 ] == '\0' ) {
        errno = EINVAL;
        return 0;
    }
    errno = 0;
    char * end_ptr = NULL;
    ldouble const x = strtold( str, &end_ptr );
    if ( errno ) { return 0; }
    while ( isspace( *end_ptr ) ) {
        end_ptr++;
    }
    if ( *end_ptr != '\0' ) {
        errno = EBADMSG;
        return x;
    } else {
        return x;
    }
}


{% elif type == 'bool' %} {# 'FLOAT' not in typeclasses #}


#include <string.h>


static
bool
prefixi(
        char const * const xs,
        char const * const ys )
{
    for ( size_t i = 0; xs[ i ] != '\0'; i++ ) {
        if ( tolower( ( uchar ) xs[ i ] ) != tolower( ( uchar ) ys[ i ] ) ) {
            return false;
        }
    }
    return true;
}


{{type}}
{{funcname}}__from_str(
        char const * const str )
{
    if ( str == NULL || str[ 0 ] == '\0' ) {
        errno = EINVAL;
        return false;
    }
    errno = 0;
    char const * p = str;
    while ( isspace( *p ) ) {
        p++;
    }
    {{type}} r;
    if ( prefixi( p, "true" ) ) {
        r = true;
        p += strlen( "true" );
    } else if ( prefixi( p, "false" ) ) {
        r = false;
        p += strlen( "false" );
    } else {
        errno = EBADMSG;
        return false;
    }
    while ( isspace( *p ) ) {
        p++;
    }
    if ( *p != '\0' ) {
        errno = EBADMSG;
        return false;
    }
    return r;
}


{% else %} {# 'FLOAT' not in typeclasses and type != 'bool' #}


#include <inttypes.h>


{{type}}
{{funcname}}__from_str(
        char const * const str )
{
    if ( str == NULL || str[ 0 ] == '\0' ) {
        errno = EINVAL;
        return 0;
    }
    errno = 0;
    char * end_ptr;
{% if num_type == 'unsigned' %}
    uintmax_t const x = strtoumax( str, &end_ptr, 10 );
{% else %}
    intmax_t const x = strtoimax( str, &end_ptr, 10 );
{% endif %}
    if ( errno ) { return 0; }
    while ( isspace( *end_ptr ) ) {
        end_ptr++;
    }
    if ( *end_ptr != '\0' ) {
        errno = EBADMSG;
        return 0;
    } else if ( x < {{funcname}}__min_bound() ) {
        errno = ERANGE;
        return {{funcname}}__min_bound();
    } else if ( x > {{funcname}}__max_bound() ) {
        errno = ERANGE;
        return {{funcname}}__max_bound();
    } else {
        return x;
    }
}


{% endif %}


void
{{funcname}}__argparse(
        char const * const name,
        char const * const value,
        void * const vdestination )
{
    if ( vdestination == NULL ) { return; }
    {{type}} * const dest = vdestination;
    *dest = {{funcname}}__from_str( value );
}


{% if 'NUM' in typeclasses %}


static
void
argparse_check(
        char const * const name,
        char const * const value,
        void * const vx,
        bool ( * const p )( {{type}} ) )
{
    ASSERT( p != NULL );

    errno = 0;
    if ( vx == NULL ) { return; }
    {{type}} * const x = vx;
    *x = {{funcname}}__from_str( value );
    if ( errno == 0 && p( *x ) == false ) {
        errno = ERANGE;
    }
}



void
{{funcname}}__argparse_nonzero(
        char const * const name,
        char const * const value,
        void * const vx )
{
    argparse_check( name, value, vx, {{funcname}}__is_nonzero );
}


void
{{funcname}}__argparse_negative(
        char const * const name,
        char const * const value,
        void * const vx )
{
    argparse_check( name, value, vx, {{funcname}}__is_negative );
}


void
{{funcname}}__argparse_nonpositive(
        char const * const name,
        char const * const value,
        void * const vx )
{
    argparse_check( name, value, vx, {{funcname}}__is_nonpositive );
}


void
{{funcname}}__argparse_nonnegative(
        char const * const name,
        char const * const value,
        void * const vx )
{
    argparse_check( name, value, vx, {{funcname}}__is_nonnegative );
}


void
{{funcname}}__argparse_positive(
        char const * const name,
        char const * const value,
        void * const vx )
{
    argparse_check( name, value, vx, {{funcname}}__is_positive );
}


{% endif %} {# 'NUM' in typeclasses #}
{% endif %} {# 'FROM_STR' in typeclasses #}


{% if 'TO_STR' in typeclasses %}

{% if type == 'bool' %}

char const *
{{funcname}}__to_str(
        {{type}} const x )
{
    return x ? "true" : "false";
}

{% else %} {# type != 'bool' #}

{{no_implementation}}

{% endif %}

{% endif %}


{% if 'TO_STRM' in typeclasses %}

#include <errno.h>
#include <limits.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <libmacro/assert.h>
#include <libmacro/logic.h>


{% if num_type == 'float' %}


char *
{{funcname}}__to_strm(
        {{type}} const x )
{
    errno = 0;
    size_t const size = 64;
    char * const buf = malloc( size );
    if ( errno ) { return buf; }
    {{funcname}}__into_strm( x, buf, size );
    return buf;
}


static
void
into_strm(
        {{type}} const x,
        char * const buf,
        size_t const size )
{
    ASSERT( size > 0 );

    snprintf( buf, size, "%.6lf", ( double ) x );
    buf[ size - 1 ] = '\0';
}


{% else %} {# num_type != 'float' #}


static
void
reverse(
        char * const xs )
{
    ASSERT( xs != NULL );

    size_t const len = strlen( xs );
    if ( len == 1 ) {
        return;
    }
    for ( size_t i = 0; i < ( len / 2 ); i++ ) {
        char * const l = xs + i;
        char * const r = xs + ( len - 1 - i );
        char const tmp = *l;
        *l = *r;
        *r = tmp;
    }
}


{% if num_type == 'unsigned' %}


char *
{{funcname}}__to_strm(
        {{type}} const x )
{
    size_t const nd = {{funcname}}__num_digits( x );
    ASSERT( nd < SIZE_MAX - 1 );

    size_t const size = nd + 1;
    errno = 0;
    char * const buf = malloc( size );
    if ( errno ) { return buf; }
    {{funcname}}__into_strm( x, buf, size );
    return buf;
}


static
void
into_strm(
        {{type}} const x,
        char * const buf,
        size_t const size )
{
    ASSERT( size > 0 );

    size_t i = 0;
    {{type}} r = x;
    do {
        if ( i >= size - 1 ) {
            break;
        }
        buf[ i ] = '0' + ( r % 10 );
        r /= 10;
        i++;
    } while ( r != 0 );
    buf[ i ] = '\0';
    reverse( buf );
}


{% else %} {# num_type != 'unsigned' #}


char *
{{funcname}}__to_strm(
        {{type}} const x )
{
    size_t const nd = {{funcname}}__num_digits( x );
    ASSERT( nd < SIZE_MAX - 2 );

    size_t const size = nd + 1 + ( x < 0 );
    errno = 0;
    char * const buf = malloc( size );
    if ( errno ) { return buf; }
    {{funcname}}__into_strm( x, buf, size );
    return buf;
}


static
void
into_strm(
        {{type}} const x,
        char * const buf,
        size_t const size )
{
    ASSERT( buf != NULL, size > 0 );

    bool const neg = x < 0;
    if ( neg ) {
        buf[ 0 ] = '-';
    }
    size_t i = neg;
    {{type}} r = {{funcname}}__abs( x );
    do {
        if ( i >= size - 1 ) {
            break;
        }
        buf[ i ] = '0' + ( r % 10 );
        r /= 10;
        i++;
    } while ( r != 0 );
    buf[ i ] = '\0';
    reverse( buf + neg );
}


{% endif %} {# num_type != 'unsigned' #}
{% endif %} {# num_type != 'float' #}


void
{{funcname}}__into_strm(
        {{type}} const x,
        char * const buf,
        size_t const size )
{
    ASSERT( IMPLIES( buf == NULL, size == 0 ) );

    if ( size > 0 ) {
        // We use a temporary buffer so that reversing in `into_strm` works:
        char tmp[ 64 ];
        into_strm( x, tmp, sizeof tmp );
        strncpy( buf, tmp, size - 1 );
        buf[ size - 1 ] = '\0';
    }
}


{% endif %} {# TO_STRM #}

