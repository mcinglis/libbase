
// Copyright 2015  Malcolm Inglis <http://minglis.id.au>
//
// This file is part of Libbase.
//
// Libbase is free software: you can redistribute it and/or modify it under
// the terms of the GNU Affero General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// Libbase is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for
// more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Libbase. If not, see <https://gnu.org/licenses/>.


// This file is the result of rendering:
//
//     {{template_path}}
//
// You should make changes to this file by tuning the build process, or (at a
// stretch) modifying the generation script or template file; not by editing
// this file as-is.


#ifndef LIBBASE_{{macroname}}_H
#define LIBBASE_{{macroname}}_H


#include <libtypes/types.h>
#include <libmacro/nelem.h>
{% for p in sys_headers %}
#include <{{p}}>
{% endfor %}

{% for path in rel_headers %}
#include "{{p}}"
{% endfor %}


{{type}}
{{funcname}}__id(
        {{type}} );



{% if char_funcs is defined %}

bool
{{funcname}}__equal_i(
        {{type}},
        {{type}} );


bool
{{funcname}}__not_equal_i(
        {{type}},
        {{type}} );


ord
{{funcname}}__compare_i(
        {{type}},
        {{type}} );

{# TODO: provide classification functions e.g. 'char__is_whitespace()' #}

{% endif %}



{% macro typeclass(name) %}
{% if name in typeclasses %}
///////////////////////////////////
/// TYPECLASS: {{name}}
///////////////////////////////////

{{ caller() }}
{% endif %}
{% endmacro %}


{% call typeclass('BOUNDED') %}

{{type}}
{{funcname}}__min_bound( void );
// Returns the minimum value representable by the `{{type}}` type.


{{type}}
{{funcname}}__max_bound( void );
// Returns the maximum value representable by the `{{type}}` type.

{% endcall %}


{% call typeclass('EQ') %}

bool
{{funcname}}__equal(
        {{type}},
        {{type}} );


bool
{{funcname}}__not_equal(
        {{type}},
        {{type}} );

{% endcall %}


{% call typeclass('ORD') %}

ord
{{funcname}}__compare(
        {{type}} x,
        {{type}} y );
// Returns `LT` if `x < y`, `EQ` if `x == y`, or `GT` if `x > y`.


bool
{{funcname}}__less_than(
        {{type}},
        {{type}} );


bool
{{funcname}}__less_than_or_eq(
        {{type}},
        {{type}} );


bool
{{funcname}}__greater_than_or_eq(
        {{type}},
        {{type}} );


bool
{{funcname}}__greater_than(
        {{type}},
        {{type}} );


{{type}}
{{funcname}}__min2(
        {{type}} x,
        {{type}} y );
// Returns `x` if `x < y`, or `y` otherwise.


{{type}}
{{funcname}}__max2(
        {{type}} x,
        {{type}} y );
// Returns `x` if `x > y`, or `y` otherwise.


{{type}}
{{funcname}}__min_n(
        {{type}} const * xs,
        size_t n );
// Returns the minimum value of the first `n` elements in the array `xs`.
// @requires n > 0, xs != NULL


{{type}}
{{funcname}}__max_n(
        {{type}} const * xs,
        size_t n );
// Returns the maximum value of the first `n` elements in the array `xs`.
// @requires n > 0, xs != NULL


// @public
#define {{funcname}}__min( ... ) \
    {{funcname}}__min_n( \
        ( {{type}}[] ){ __VA_ARGS__ }, \
        NELEM( ( {{type}}[] ){ __VA_ARGS__ } ) )


// @public
#define {{funcname}}__max( ... ) \
    {{funcname}}__max_n( \
        ( {{type}} [] ){ __VA_ARGS__ }, \
        NELEM( ( {{type}} [] ){ __VA_ARGS__ } ) )


{{type}}
{{funcname}}__clamp(
        {{type}} x,
        {{type}} lower,
        {{type}} upper );
// Returns `lower` if `lower >= x`, `upper` if `upper <= x`, or `x` otherwise.


bool
{{funcname}}__in_range(
        {{type}} lower,
        {{type}} upper,
        {{type}} x );
// Returns `lower <= x && x <= upper`.


bool
{{funcname}}__in_xrange(
        {{type}} lower,
        {{type}} upper,
        {{type}} x );
// Returns `lower < x && x < upper`.

{% endcall %}


{% call typeclass('ENUM') %}

{{type}}
{{funcname}}__succ(
        {{type}} x );
// Returns the smallest `y` such that `y > x`.


{{type}}
{{funcname}}__pred(
        {{type}} x );
// Returns the largest `y` such that `y < x`.


{{type}}
{{funcname}}__succ_b(
        {{type}} x );
// Returns the largest `y` such that `y > x`, or `x` if there exists no
// such `y` in the `{{type}}` type.


{{type}}
{{funcname}}__pred_b(
        {{type}} x );
// Returns the largest `y` such that `y > x`, or `x` if there exists no
// such `y` in the `{{type}}` type.

{% endcall %}



{% call typeclass('NUM') %}

bool
{{funcname}}__is_signed( void );
// Returns the boolean that `{{type}}` values can be negative.


{{type}}
{{funcname}}__zero( void );
// Returns the zero value of the `{{type}}` type.


bool
{{funcname}}__add_would_underflow(
        {{type}},
        {{type}} );


bool
{{funcname}}__add_would_overflow(
        {{type}},
        {{type}} );


bool
{{funcname}}__can_add(
        {{type}},
        {{type}} );


bool
{{funcname}}__sub_would_underflow(
        {{type}},
        {{type}} );


bool
{{funcname}}__sub_would_overflow(
        {{type}},
        {{type}} );


bool
{{funcname}}__can_sub(
        {{type}},
        {{type}} );


bool
{{funcname}}__mul_would_underflow(
        {{type}},
        {{type}} );


bool
{{funcname}}__mul_would_overflow(
        {{type}},
        {{type}} );


bool
{{funcname}}__can_mul(
        {{type}},
        {{type}} );


bool
{{funcname}}__div_would_underflow(
        {{type}},
        {{type}} );


bool
{{funcname}}__div_would_overflow(
        {{type}},
        {{type}} );


bool
{{funcname}}__can_div(
        {{type}},
        {{type}} );


{{type}}
{{funcname}}__add(
        {{type}} x,
        {{type}} y );


{{type}}
{{funcname}}__sub(
        {{type}} x,
        {{type}} y );


{{type}}
{{funcname}}__mul(
        {{type}} x,
        {{type}} y );


{{type}}
{{funcname}}__div(
        {{type}} x,
        {{type}} y );


{{type}}
{{funcname}}__mod(
        {{type}} x,
        {{type}} y );


{{type}}
{{funcname}}__negate(
        {{type}} x );


{{type}}
{{funcname}}__abs(
        {{type}} x );


{{type}}
{{funcname}}__add_b(
        {{type}},
        {{type}} );


{{type}}
{{funcname}}__sub_b(
        {{type}} x,
        {{type}} y );


{{type}}
{{funcname}}__mul_b(
        {{type}} x,
        {{type}} y );


{{type}}
{{funcname}}__div_b(
        {{type}} x,
        {{type}} y );


{{type}}
{{funcname}}__mod_b(
        {{type}} x,
        {{type}} y );


{{type}}
{{funcname}}__negate_b(
        {{type}} x );


{{type}}
{{funcname}}__abs_b(
        {{type}} x );


{{type}}
{{funcname}}__update_average(
        {{type}} average,
        intmax_t num,
        {{type}} value );
// Given a cumulative `average` over `num` data points, returns the average of
// those data points and the `value`. This provides a safer way to calculate:
//
//     ( ( average * num ) + value ) / ( num + 1 )
//
// If `num <= 0`, then `value` is simply returned as the new average.
//
// @error EOVERFLOW if `num == INTMAX_MAX`,
//                  or if `num > {{funcname}}__max_bound() && average > 0`,
//                  or if the internal arithmetic operations would overflow;
//                  then returns the given `average`.


bool
{{funcname}}__same_sign(
        {{type}},
        {{type}} );
// Returns the boolean that the two values have the same sign.


bool
{{funcname}}__in_delta(
        {{type}} x,
        {{type}} delta,
        {{type}} y );
// Returns `( x - delta ) <= y && y <= ( x + delta )`.


bool
{{funcname}}__in_xdelta(
        {{type}} x,
        {{type}} delta,
        {{type}} y );
// Returns `( x - delta ) < y && y < ( x + delta )`.


bool
{{funcname}}__is_negative(
        {{type}} x );
// Returns `x < 0`.


bool
{{funcname}}__is_nonpositive(
        {{type}} x );
// Returns `x <= 0`.


bool
{{funcname}}__is_zero(
        {{type}} x );
// Returns `x == 0`.


bool
{{funcname}}__is_nonzero(
        {{type}} x );
// Returns `x != 0`.


bool
{{funcname}}__is_nonnegative(
        {{type}} x );
// Returns `x >= 0`.


bool
{{funcname}}__is_positive(
        {{type}} x );
// Returns `x > 0`.


ord
{{funcname}}__compare_0(
        {{type}} x );
// Returns `{{funcname}}__compare( x, 0 )`.


bool
{{funcname}}__is_even(
        {{type}} x );
// Returns `x % 2 == 0`.


bool
{{funcname}}__is_odd(
        {{type}} x );
// Returns `x % 2 == 1`.


{{type}}
{{funcname}}__add_2(
        {{type}} );


{{type}}
{{funcname}}__sub_2(
        {{type}} );


{{type}}
{{funcname}}__mul_2(
        {{type}} );


{{type}}
{{funcname}}__div_2(
        {{type}} );


{{type}}
{{funcname}}__mod_2(
        {{type}} );


{{type}}
{{funcname}}__mul_10(
        {{type}} );


{{type}}
{{funcname}}__div_10(
        {{type}} );


{{type}}
{{funcname}}__add_b_2(
        {{type}} );


{{type}}
{{funcname}}__sub_b_2(
        {{type}} );


{{type}}
{{funcname}}__mul_b_2(
        {{type}} );


{{type}}
{{funcname}}__div_b_2(
        {{type}} );


{{type}}
{{funcname}}__mod_b_2(
        {{type}} );


{{type}}
{{funcname}}__mul_b_10(
        {{type}} );


{{type}}
{{funcname}}__div_b_10(
        {{type}} );


{{type}}
{{funcname}}__mod_b_10(
        {{type}} );

{% endcall %}


{% call typeclass('FROM_STR') %}

{{type}}
{{funcname}}__from_str(
        char const * str );
// Parses the given `str` to produce the contained `{{type}}` value.
// On error, sets `errno` to:
// - `EINVAL` if `str == NULL` or `str` is `""`;
// - `EBADMSG` if `str` contains a value but a non-whitespace suffix;
// - `ERANGE` if the resulting value can't be represented with `{{type}}`.


void
{{funcname}}__arg_parse(
        char const * name,
        char const * value,
        void * destination );
// Use with functions from Libargs to parse command-line arguments into
// values of type `{{type}}`.

{% endcall %}


{% call typeclass('TO_STR') %}

char const *
{{funcname}}__to_str(
        {{type}} );
// Returns a pointer to a string representation of the given value.

{% endcall %}


{% call typeclass('TO_STRM') %}

void
{{funcname}}__into_strm(
        {{type}},
        char * buf,
        size_t size );


char *
{{funcname}}__to_strm(
        {{type}} );
// Returns a pointer to an allocated buffer of bytes holding the string
// representation of the given value.

{% endcall %}


#endif // ifndef LIBBASE_{{macroname}}_H

